{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":["file:///C:/bid%20master/app/api/auctions/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\n\r\n// GET /api/auctions/[id] - 특정 매물의 상세 정보 조회\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: Promise<{ id: string }> }\r\n) {\r\n  // params가 Promise인 경우 await로 해결\r\n  const resolvedParams = await params;\r\n  console.log(\"🔍 매물 상세 정보 조회 요청:\", resolvedParams?.id); // 로그 추가\r\n  console.log(\"🔍 전체 params 객체:\", JSON.stringify(resolvedParams)); // 로그 추가\r\n  console.log(\"🔍 params 타입:\", typeof resolvedParams); // 로그 추가\r\n  console.log(\"🔍 params.id 타입:\", typeof resolvedParams?.id); // 로그 추가\r\n\r\n  try {\r\n    // 매물 ID 유효성 검사 - 모든 ID 허용\r\n    if (!resolvedParams?.id) {\r\n      console.error(\"❌ 매물 ID가 없습니다:\", resolvedParams?.id);\r\n      return NextResponse.json(\r\n        {\r\n          success: false,\r\n          error: \"매물 ID가 필요합니다.\",\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    console.log(\"🔍 받은 매물 ID:\", resolvedParams.id); // 로그 추가\r\n    console.log(\"🔍 ID 길이:\", resolvedParams.id.length); // 로그 추가\r\n    console.log(\"🔍 ID 타입:\", typeof resolvedParams.id); // 로그 추가\r\n\r\n    // 매물 ID를 기반으로 랜덤 데이터 생성 (일관성을 위해 시드 사용)\r\n    // ID가 복잡한 형태일 경우 마지막 부분을 시드로 사용\r\n    let seed = resolvedParams.id;\r\n    if (resolvedParams.id.includes(\"_\")) {\r\n      // 언더스코어가 있는 경우 마지막 부분을 시드로 사용\r\n      const parts = resolvedParams.id.split(\"_\");\r\n      seed = parts[parts.length - 1] || resolvedParams.id;\r\n    }\r\n    console.log(\"🔍 사용할 시드:\", seed); // 로그 추가\r\n\r\n    // 랜덤 매물 데이터 생성\r\n    const auctionItem = generateRandomPropertyWithSeed(seed);\r\n\r\n    // 추가 상세 정보 생성 (안전한 실행)\r\n    let enhancedProperty;\r\n    try {\r\n      enhancedProperty = {\r\n        ...auctionItem,\r\n        // 추가 상세 정보\r\n        location: generateLocation(),\r\n        area: generateArea(),\r\n        buildingYear: generateBuildingYear(),\r\n        floor: generateFloor(),\r\n        structure: \"철근콘크리트\",\r\n        ownership: \"개인 소유 (100%)\",\r\n        mortgage: generateMortgageInfo(),\r\n        restrictions: generateRestrictions(),\r\n        marketTrend: generateMarketTrend(),\r\n        neighborhoodInfo: generateNeighborhoodInfo(),\r\n      };\r\n      console.log(\"✅ 추가 상세 정보 생성 완료\"); // 로그 추가\r\n    } catch (enhanceError) {\r\n      console.error(\"❌ 추가 상세 정보 생성 실패:\", enhanceError);\r\n      // 기본 데이터만 사용\r\n      enhancedProperty = auctionItem;\r\n    }\r\n\r\n    console.log(\"✅ 매물 상세 정보 조회 성공:\", auctionItem.title); // 로그 추가\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      data: enhancedProperty,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"❌ 매물 상세 정보 조회 실패:\", error); // 로그 추가\r\n\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: \"매물 정보를 불러오는데 실패했습니다.\",\r\n        details: error instanceof Error ? error.message : \"알 수 없는 오류\",\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// 시드를 사용한 랜덤 매물 생성 함수\r\nfunction generateRandomPropertyWithSeed(seed: string) {\r\n  console.log(\"🔍 시드 기반 매물 생성 시작:\", seed); // 로그 추가\r\n\r\n  try {\r\n    // 시드를 기반으로 일관된 랜덤 데이터 생성\r\n    const locations = [\r\n      \"강남구\",\r\n      \"서초구\",\r\n      \"송파구\",\r\n      \"마포구\",\r\n      \"용산구\",\r\n      \"성동구\",\r\n      \"영등포구\",\r\n      \"강동구\",\r\n      \"노원구\",\r\n      \"종로구\",\r\n      \"중구\",\r\n      \"강서구\",\r\n      \"동작구\",\r\n    ];\r\n\r\n    const propertyTypes = [\"아파트\", \"빌라\", \"오피스텔\", \"상가\", \"원룸\"];\r\n    const riskTypes = [\"LOW\", \"MEDIUM\", \"HIGH\", \"VERY_HIGH\"];\r\n\r\n    // 시드 기반 랜덤 선택 (안전한 인덱스 계산)\r\n    const locationIndex = Math.abs(seed.charCodeAt(0)) % locations.length;\r\n    const propertyTypeIndex =\r\n      Math.abs(seed.charCodeAt(1)) % propertyTypes.length;\r\n    const riskTypeIndex = Math.abs(seed.charCodeAt(2)) % riskTypes.length;\r\n\r\n    const location = locations[locationIndex];\r\n    const propertyType = propertyTypes[propertyTypeIndex];\r\n    const riskType = riskTypes[riskTypeIndex];\r\n\r\n    // 면적 (25-150㎡)\r\n    const area = 25 + (Math.abs(seed.charCodeAt(3)) % 125);\r\n\r\n    // 감정가 (5천만원 ~ 15억원)\r\n    const appraisedValue =\r\n      50000000 + (Math.abs(seed.charCodeAt(4)) % 1450000000);\r\n\r\n    // 시작 입찰가 (감정가의 70-85%)\r\n    const startingBidRate = 0.7 + (Math.abs(seed.charCodeAt(5)) % 15) / 100;\r\n    const startingBid = Math.floor(appraisedValue * startingBidRate);\r\n\r\n    // 시장가 (감정가의 90-110%)\r\n    const marketPriceRate = 0.9 + (Math.abs(seed.charCodeAt(6)) % 20) / 100;\r\n    const marketPrice = Math.floor(appraisedValue * marketPriceRate);\r\n\r\n    const titles = [\r\n      `${location} ${propertyType} ${area}㎡`,\r\n      `${location} 래미안 ${area}㎡`,\r\n      `${location} 힐스테이트 ${area}㎡`,\r\n      `${location} 아크로 ${area}㎡`,\r\n      `${location} 헬리오시티 ${area}㎡`,\r\n      `${location} 드림팰리스 ${area}㎡`,\r\n      `${location} 래미안아트팰리스 ${area}㎡`,\r\n      `${location} 타워팰리스 ${area}㎡`,\r\n    ];\r\n\r\n    const titleIndex = Math.abs(seed.charCodeAt(7)) % titles.length;\r\n    const title = titles[titleIndex];\r\n\r\n    // 시드 기반 이미지 URL 생성 (일관성 유지)\r\n    const imageSeed = Math.abs(\r\n      seed.split(\"\").reduce((a, b) => a + b.charCodeAt(0), 0)\r\n    );\r\n    const imageUrl = `https://images.unsplash.com/photo-${imageSeed}?w=400&h=300&fit=crop`;\r\n\r\n    // 시드 기반 추가 데이터 생성\r\n    const floorSeed = (Math.abs(seed.charCodeAt(8)) % 20) + 1;\r\n    const conditionIndex = Math.abs(seed.charCodeAt(9)) % 4;\r\n    const trendIndex = Math.abs(seed.charCodeAt(10)) % 4;\r\n    const addressSeed = (Math.abs(seed.charCodeAt(11)) % 100) + 1;\r\n\r\n    const conditions = [\"우수\", \"양호\", \"보통\", \"노후\"];\r\n    const trends = [\"안정적 상승\", \"상승세\", \"지속적 상승\", \"불안정\"];\r\n\r\n    const result = {\r\n      id: seed,\r\n      title,\r\n      itemType: propertyType, // 실제 매물 유형 사용\r\n      imageUrl,\r\n      appraisedValue,\r\n      startingBid,\r\n      marketPrice,\r\n      riskType,\r\n      riskData: {\r\n        location: `${location} ${addressSeed}번지`,\r\n        size: `${area}㎡`,\r\n        floor: `${floorSeed}층`,\r\n        condition: conditions[conditionIndex],\r\n        marketTrend: trends[trendIndex],\r\n      },\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n\r\n    console.log(\"✅ 시드 기반 매물 생성 완료:\", result.title); // 로그 추가\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\"❌ 시드 기반 매물 생성 실패:\", error); // 로그 추가\r\n\r\n    // 기본 매물 데이터 반환 (에러 시 대체 데이터)\r\n    return {\r\n      id: seed,\r\n      title: \"기본 매물\",\r\n      itemType: \"부동산\",\r\n      imageUrl:\r\n        \"https://images.unsplash.com/photo-1560518883-ce09059eeffa?w=400&h=300&fit=crop\",\r\n      appraisedValue: 100000000,\r\n      startingBid: 80000000,\r\n      marketPrice: 110000000,\r\n      riskType: \"MEDIUM\",\r\n      riskData: {\r\n        location: \"서울시 강남구\",\r\n        size: \"84㎡\",\r\n        floor: \"5층\",\r\n        condition: \"양호\",\r\n        marketTrend: \"안정적 상승\",\r\n      },\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n  }\r\n}\r\n\r\n// 헬퍼 함수들 - 실제 환경에서는 데이터베이스에서 조회\r\nfunction generateLocation(): string {\r\n  console.log(\"🔍 위치 정보 생성\"); // 로그 추가\r\n  const locations = [\r\n    \"서울시 강남구 테헤란로 123\",\r\n    \"서울시 서초구 서초대로 456\",\r\n    \"서울시 송파구 올림픽로 789\",\r\n    \"서울시 마포구 홍대입구역 101\",\r\n    \"서울시 용산구 이태원로 202\",\r\n  ];\r\n  return locations[Math.floor(Math.random() * locations.length)];\r\n}\r\n\r\nfunction generateArea(): number {\r\n  console.log(\"🔍 면적 정보 생성\"); // 로그 추가\r\n  // 50-150㎡ 사이의 랜덤 면적\r\n  return Math.floor(Math.random() * 100) + 50;\r\n}\r\n\r\nfunction generateBuildingYear(): number {\r\n  console.log(\"🔍 건축년도 정보 생성\"); // 로그 추가\r\n  // 2000-2020년 사이의 랜덤 건축년도\r\n  return Math.floor(Math.random() * 21) + 2000;\r\n}\r\n\r\nfunction generateFloor(): number {\r\n  console.log(\"🔍 층수 정보 생성\"); // 로그 추가\r\n  // 1-20층 사이의 랜덤 층수\r\n  return Math.floor(Math.random() * 20) + 1;\r\n}\r\n\r\nfunction generateMortgageInfo(): string {\r\n  console.log(\"🔍 저당권 정보 생성\"); // 로그 추가\r\n  const mortgageOptions = [\r\n    \"저당권 설정 없음\",\r\n    \"은행 저당권 설정 (담보금액: 5억원)\",\r\n    \"개인 저당권 설정 (담보금액: 3억원)\",\r\n    \"복수 저당권 설정 (담보금액: 8억원)\",\r\n  ];\r\n  return mortgageOptions[Math.floor(Math.random() * mortgageOptions.length)];\r\n}\r\n\r\nfunction generateRestrictions(): string[] {\r\n  console.log(\"🔍 제한사항 정보 생성\"); // 로그 추가\r\n  const restrictionSets = [\r\n    [\"경매절차 진행 중\", \"소유권 이전 제한\", \"담보권 설정 가능\"],\r\n    [\"경매절차 진행 중\", \"소유권 이전 제한\", \"담보권 설정 가능\", \"전세권 설정\"],\r\n    [\"경매절차 진행 중\", \"소유권 이전 제한\", \"담보권 설정 가능\", \"지상권 설정\"],\r\n    [\r\n      \"경매절차 진행 중\",\r\n      \"소유권 이전 제한\",\r\n      \"담보권 설정 가능\",\r\n      \"전세권 설정\",\r\n      \"지상권 설정\",\r\n    ],\r\n  ];\r\n  return restrictionSets[Math.floor(Math.random() * restrictionSets.length)];\r\n}\r\n\r\nfunction generateMarketTrend(): string {\r\n  console.log(\"🔍 시장동향 정보 생성\"); // 로그 추가\r\n  const trends = [\r\n    \"현재 시장 상황 양호, 안정적 거래 환경\",\r\n    \"시장 상승세 지속, 투자 적기\",\r\n    \"시장 변동성 있음, 신중한 검토 필요\",\r\n    \"지역 개발 계획으로 인한 상승 가능성\",\r\n    \"교통 인프라 개선으로 접근성 향상\",\r\n  ];\r\n  return trends[Math.floor(Math.random() * trends.length)];\r\n}\r\n\r\nfunction generateNeighborhoodInfo(): string {\r\n  console.log(\"🔍 주변환경 정보 생성\"); // 로그 추가\r\n  const neighborhoodOptions = [\r\n    \"교통 접근성 우수, 상업지구 인근\",\r\n    \"교육 환경 우수, 학원가 인근\",\r\n    \"의료 시설 접근성 좋음, 병원가 인근\",\r\n    \"쇼핑 편의성 우수, 상가 밀집 지역\",\r\n    \"주거 환경 우수, 아파트 단지 인근\",\r\n  ];\r\n  return neighborhoodOptions[\r\n    Math.floor(Math.random() * neighborhoodOptions.length)\r\n  ];\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 343, "column": 0}, "map": {"version":3,"sources":["file:///C:/bid%20master/app/api/auctions/%5Bid%5D/bid/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\n\r\n// 매물 목록 API에서 사용하는 함수를 import\r\nimport { generateRandomPropertyWithSeed } from \"../route\";\r\n\r\n/**\r\n * 매물 ID로 매물 정보를 조회하는 함수\r\n * 기존 API 로직을 재사용하여 일관된 데이터를 반환합니다.\r\n */\r\nasync function getAuctionItemById(id: string) {\r\n  try {\r\n    console.log(`🔍 매물 정보 조회 시작 - ID: ${id}`);\r\n\r\n    // 매물 ID를 기반으로 랜덤 데이터 생성 (일관성을 위해 시드 사용)\r\n    let seed = id;\r\n    if (id.includes(\"_\")) {\r\n      // 언더스코어가 있는 경우 마지막 부분을 시드로 사용\r\n      const parts = id.split(\"_\");\r\n      seed = parts[parts.length - 1] || id;\r\n    }\r\n\r\n    console.log(`🔍 사용할 시드: ${seed}`);\r\n\r\n    // 시드 기반 매물 데이터 생성\r\n    const auctionItem = generateRandomPropertyWithSeed(seed);\r\n\r\n    console.log(`✅ 매물 정보 조회 완료: ${auctionItem.title}`);\r\n    return auctionItem;\r\n  } catch (error) {\r\n    console.error(\"❌ 매물 정보 조회 실패:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * 입찰 처리 API\r\n * POST /api/auctions/[id]/bid\r\n *\r\n * 사용자의 입찰을 처리하고 시뮬레이션 결과를 계산합니다.\r\n * 요청 본문: { userId: string, bidAmount: number }\r\n */\r\nexport async function POST(\r\n  request: NextRequest,\r\n  { params }: { params: Promise<{ id: string }> }\r\n) {\r\n  try {\r\n    const resolvedParams = await params;\r\n    const auctionItemId = resolvedParams.id;\r\n    console.log(`🎯 입찰 처리 시작 - 매물 ID: ${auctionItemId}`);\r\n\r\n    // 요청 본문 파싱\r\n    const body = await request.json();\r\n    const { bidAmount } = body;\r\n\r\n    // 입력값 검증\r\n    if (!bidAmount || bidAmount <= 0) {\r\n      console.log(\"❌ 잘못된 입력값:\", { bidAmount });\r\n      return NextResponse.json(\r\n        {\r\n          success: false,\r\n          error: \"입찰가를 올바르게 입력해주세요\",\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    console.log(`💰 입찰가: ${bidAmount}원`);\r\n\r\n    // 실제 매물 데이터 조회 (기존 API 로직 재사용)\r\n    const auctionItem = await getAuctionItemById(auctionItemId);\r\n\r\n    if (!auctionItem) {\r\n      console.log(\"❌ 매물을 찾을 수 없습니다:\", auctionItemId);\r\n      return NextResponse.json(\r\n        {\r\n          success: false,\r\n          error: \"매물을 찾을 수 없습니다\",\r\n        },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    console.log(\r\n      `📦 매물 정보: ${auctionItem.title}, 감정가: ${auctionItem.appraisedValue}원, 시장가: ${auctionItem.marketPrice}원`\r\n    );\r\n    console.log(`🔍 매물 상세 정보:`, {\r\n      id: auctionItem.id,\r\n      title: auctionItem.title,\r\n      appraisedValue: auctionItem.appraisedValue,\r\n      marketPrice: auctionItem.marketPrice,\r\n      startingBid: auctionItem.startingBid,\r\n      riskType: auctionItem.riskType,\r\n    });\r\n\r\n    // 시뮬레이션 결과 계산\r\n    console.log(\r\n      `🧮 시뮬레이션 계산 시작 - 입찰가: ${bidAmount}원, 감정가: ${auctionItem.appraisedValue}원, 시장가: ${auctionItem.marketPrice}원`\r\n    );\r\n    const simulationResult = calculateSimulationResult(auctionItem, bidAmount);\r\n    console.log(`📊 시뮬레이션 결과:`, simulationResult);\r\n    console.log(`💰 최종 수익/손실: ${simulationResult.profitOrLoss}원`);\r\n\r\n    // 성공 응답 반환 - 원래 매물의 가격 정보를 그대로 사용\r\n    const responseData = {\r\n      success: true,\r\n      finalBid: bidAmount,\r\n      profitOrLoss: simulationResult.profitOrLoss,\r\n      marketPrice: auctionItem.marketPrice, // 원래 매물의 시장가 사용\r\n      appraisedValue: auctionItem.appraisedValue, // 원래 매물의 감정가 사용\r\n      riskLevel: auctionItem.riskType,\r\n      recommendation: simulationResult.recommendation,\r\n      details: {\r\n        competitionLevel: \"보통\",\r\n        biddingHistory: [\r\n          { bid: bidAmount - 100000, timestamp: new Date().toISOString() },\r\n          { bid: bidAmount, timestamp: new Date().toISOString() },\r\n        ],\r\n        marketTrend: \"안정적\",\r\n      },\r\n      message: \"입찰 처리가 완료되었습니다\",\r\n    };\r\n\r\n    console.log(`✅ 입찰 응답 데이터:`, {\r\n      finalBid: responseData.finalBid,\r\n      profitOrLoss: responseData.profitOrLoss,\r\n      marketPrice: responseData.marketPrice,\r\n      appraisedValue: responseData.appraisedValue,\r\n      riskLevel: responseData.riskLevel,\r\n      originalMarketPrice: auctionItem.marketPrice,\r\n      originalAppraisedValue: auctionItem.appraisedValue,\r\n      priceConsistency: {\r\n        marketPriceMatch: responseData.marketPrice === auctionItem.marketPrice,\r\n        appraisedValueMatch:\r\n          responseData.appraisedValue === auctionItem.appraisedValue,\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(responseData, { status: 200 });\r\n  } catch (error) {\r\n    console.error(\"❌ 입찰 처리 중 오류 발생:\", error);\r\n\r\n    return NextResponse.json(\r\n      {\r\n        success: false,\r\n        error: \"입찰 처리 중 오류가 발생했습니다\",\r\n        details: error instanceof Error ? error.message : \"알 수 없는 오류\",\r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * 시뮬레이션 결과 계산 함수\r\n * 매물의 위험도와 입찰가를 기반으로 결과를 계산합니다.\r\n */\r\nfunction calculateSimulationResult(auctionItem: any, bidAmount: number) {\r\n  const { appraisedValue, marketPrice, riskType } = auctionItem;\r\n\r\n  console.log(\r\n    `🔍 시뮬레이션 계산 시작 - 입찰가: ${bidAmount}원, 감정가: ${appraisedValue}원, 시장가: ${marketPrice}원`\r\n  );\r\n\r\n  // 원래 시장가와 감정가를 유지 (조정하지 않음)\r\n  console.log(\r\n    `📊 원래 가격 유지 - 시장가: ${marketPrice}원, 감정가: ${appraisedValue}원`\r\n  );\r\n\r\n  // 기본 확률 계산 (감정가 대비 입찰가 비율)\r\n  const bidRatio = bidAmount / appraisedValue;\r\n\r\n  // 위험도에 따른 성공 확률 조정\r\n  let successProbability = 0.7; // 기본 성공 확률 70%\r\n\r\n  switch (riskType) {\r\n    case \"LOW\":\r\n      successProbability = 0.9; // 낮은 위험: 90%\r\n      break;\r\n    case \"MEDIUM\":\r\n      successProbability = 0.7; // 중간 위험: 70%\r\n      break;\r\n    case \"HIGH\":\r\n      successProbability = 0.4; // 높은 위험: 40%\r\n      break;\r\n    case \"VERY_HIGH\":\r\n      successProbability = 0.2; // 매우 높은 위험: 20%\r\n      break;\r\n  }\r\n\r\n  // 입찰가가 감정가보다 높으면 성공 확률 감소\r\n  if (bidAmount > appraisedValue) {\r\n    successProbability *= 0.5;\r\n  }\r\n\r\n  // 랜덤 결과 생성\r\n  const randomValue = Math.random();\r\n  const isSuccess = randomValue < successProbability;\r\n\r\n  let profitOrLoss = 0;\r\n  let recommendation = \"\";\r\n\r\n  if (isSuccess) {\r\n    // 성공한 경우\r\n    // 수익 계산 (원래 시장가 - 입찰가)\r\n    profitOrLoss = marketPrice - bidAmount;\r\n\r\n    if (profitOrLoss > 0) {\r\n      // 이익인 경우\r\n      recommendation = \"🎉 축하합니다! 수익을 거두었습니다.\";\r\n      console.log(`💰 이익 발생: ${profitOrLoss}원`);\r\n    } else {\r\n      // 손실인 경우\r\n      recommendation = \"⚠️ 입찰가가 시장가보다 높아 손실이 발생했습니다.\";\r\n      console.log(`💸 손실 발생: ${Math.abs(profitOrLoss)}원`);\r\n    }\r\n  } else {\r\n    // 실패한 경우\r\n    profitOrLoss = -bidAmount; // 입찰가만큼 손실\r\n    recommendation = \"❌ 입찰에 실패했습니다. 다음 기회를 노려보세요.\";\r\n    console.log(`❌ 입찰 실패: ${bidAmount}원 손실`);\r\n  }\r\n\r\n  // 시뮬레이션 결과 반환\r\n  return {\r\n    profitOrLoss,\r\n    recommendation,\r\n    successProbability: Math.round(successProbability * 100), // 백분율로 반환\r\n  };\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}
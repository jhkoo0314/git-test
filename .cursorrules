# Bid Master - 부동산 경매 시뮬레이션 플랫폼

## 프로젝트 개요
- Next.js 16 기반의 부동산 경매 시뮬레이션 웹 애플리케이션
- Prisma + SQLite를 사용한 데이터베이스 관리
- TypeScript와 Tailwind CSS 사용

## 기술 스택
- **프레임워크**: Next.js 16 (App Router 사용)
- **언어**: TypeScript
- **데이터베이스**: Prisma + SQLite
- **스타일링**: Tailwind CSS
- **외부 API**: Google APIs

## 코딩 규칙

### 일반 규칙
- 모든 새 파일은 TypeScript로 작성
- 엄격한 타입 체크 사용 (any 타입 지양)
- 함수와 컴포넌트에는 명확한 주석 작성
- 한국어 주석과 메시지 사용 (국내 사용자 대상)

### 컴포넌트 작성
- React 19 기능 활용 (함수형 컴포넌트 사용)
- "use client" 디렉티브를 필요한 경우에만 사용
- 컴포넌트는 `components/` 디렉토리에 저장
- Props는 interface로 명확히 정의
- 재사용 가능한 컴포넌트 설계 우선

### API 라우트
- App Router 방식 사용 (`app/api/`)
- 모든 API 응답은 일관된 JSON 형식 반환:
  ```typescript
  { success: boolean, data?: any, error?: string, pagination?: any }
  ```
- 에러 처리는 try-catch로 명확히 처리
- HTTP 상태 코드 적절히 사용
- 모든 핵심 로직에 console.log로 상태 로깅

### 데이터베이스
- Prisma Schema는 `prisma/schema.prisma`에 정의
- 모델 변경 시 `pnpm db:push` 필요
- Seed 데이터는 `prisma/seed.ts`에 작성
- 관계형 데이터 설계 시 cascade 옵션 고려

### 로깅
- 중요한 동작(데이터 로드, API 호출, 입찰 처리 등)에는 반드시 console.log 추가
- 로그 이모지 사용으로 가독성 향상:
  - 🔍 데이터 로드/조회
  - ✅ 성공
  - ❌ 에러/실패
  - 💰 입찰/금전 관련
  - 📊 리포트/분석
  - 👤 사용자 정보
  - 📄 페이지네이션
  - 🎯 모달/UI 상호작용

### 비즈니스 로직
- 위험도 타입: "LOW", "MEDIUM", "HIGH", "VERY_HIGH"
- 입찰 결과는 성공/실패로 명확히 구분
- 사용자 시뮬레이션 포인트는 기본 1000점
- 손익 계산 로직은 정확하게 구현
- **⚠️ 중요: 시장가(marketPrice)와 감정가(appraisedValue) 관련 계산 로직은 절대 수정하지 말 것**
  - 기존에 적용된 시장가/감정가 기반의 입찰 성공/실패 판정 로직 유지
  - 손익 계산 공식 변경 금지
  - 관련 필드명 변경 금지

### UI/UX
- Tailwind CSS 유틸리티 클래스 활용
- 모바일 반응형 디자인 (md:, lg: 브레이크포인트)
- 로딩 상태와 에러 상태 명확히 표시
- 사용자 친화적인 메시지와 아이콘 사용

### 성능
- 페이지네이션으로 대량 데이터 처리
- API 호출 최소화
- 불필요한 리렌더링 방지 (React.memo, useMemo 활용)

## 금지 사항
- `pnpm run dev`와 같은 서버 실행 명령어는 실행하지 말 것 (사용자에게 확인 필요)
- any 타입 사용 지양
- 하드코딩된 API 키나 민감한 정보 포함 금지
- 직접적인 DOM 조작 금지 (React 방식 사용)
- **시장가(marketPrice), 감정가(appraisedValue) 관련 비즈니스 로직 수정 금지**

## 디버깅
- Chrome DevTools를 활용하여 로그와 네트워크 확인
- 에러 발생 시 스크린샷과 함께 분석
- 사용자가 비개발자임을 고려하여 쉬운 설명 제공

## 코드 설명
- 모든 설명은 한국어로 제공
- 비개발자도 이해할 수 있도록 쉽고 명확하게 작성
- 전문 용어 사용 시 간단한 설명 추가

